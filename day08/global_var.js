// 전역변수의 문제점
// 전역변수는 가장 최상위 스코프에 선언된 변수들을 의미한다.
// val 변수는 현재 프로그램이 종료될 때 까지 유효하다.
var val = 10;
// 따라서 val는 프로그램이 동작하는 한 메모리 공간을 계속 점유한다.

function foo() {
    console.log(val);   // undefined, 함수의 할당문이 실행되기 전
    var val = 'local';    // var는 재할당이 가능하지ㅏ
}

foo();
console.log(val);


// 자바스크립트에서 전역 변수는 특별한 경우가 아니면 코드가 적재되자 마자 평가된다.
// 때문에 var 키워드로 선언한 객체타입은 어떠한 객체들보다 먼저 실행된다.
// 대표적으로 window,  self, this, global 등이 있다.

// 교재에서 설명하는 전역변수의 단점은 아래와 같다.
// 1) 생명주기가 길어 그만큼 메모리 점유율이 크다.
// 2) 스코프 체인 가장 상단에 존재하여 변수 검색이 가장 느리다
// 3) 변수 식별자 중복으로 인한 위험(네임스페이스 오염)

var glo = 'global';
function bar() {
    let val = 'local'
    console.log(val);   // 지역변수 val는 bar 함수의 호출이 종료되는 시점에 메모리에서 해제된다.
    console.log(glo);   // 전역변수 glo는 스코프 체인 구조상 [bar 영역] -> [전역] 에서 전역에 위치한다.
                        // 만약 bar 영역에서 glo를 찾지 못하면 상위 영역 [전역]에서 찾아야하는 단점이 있다.
    return;         
}